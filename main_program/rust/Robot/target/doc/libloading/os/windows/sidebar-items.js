initSidebarItems({"constant":[["LOAD_IGNORE_CODE_AUTHZ_LEVEL","Do not check AppLocker rules or apply Software Restriction Policies for the DLL."],["LOAD_LIBRARY_AS_DATAFILE","Map the file into the calling process’ virtual address space as if it were a data file."],["LOAD_LIBRARY_AS_DATAFILE_EXCLUSIVE","Map the file into the calling process’ virtual address space as if it were a data file."],["LOAD_LIBRARY_AS_IMAGE_RESOURCE","Map the file into the process’ virtual address space as an image file."],["LOAD_LIBRARY_REQUIRE_SIGNED_TARGET","Specifies that the digital signature of the binary image must be checked at load time."],["LOAD_LIBRARY_SAFE_CURRENT_DIRS","Allow loading a DLL for execution from the current directory only if it is under a directory in the Safe load list."],["LOAD_LIBRARY_SEARCH_APPLICATION_DIR","Search the application’s installation directory for the DLL and its dependencies."],["LOAD_LIBRARY_SEARCH_DEFAULT_DIRS","Search default directories when looking for the DLL and its dependencies."],["LOAD_LIBRARY_SEARCH_DLL_LOAD_DIR","Directory that contains the DLL is temporarily added to the beginning of the list of directories that are searched for the DLL’s dependencies."],["LOAD_LIBRARY_SEARCH_SYSTEM32","Search `%windows%\\system32` for the DLL and its dependencies."],["LOAD_LIBRARY_SEARCH_USER_DIRS","Directories added using the `AddDllDirectory` or the `SetDllDirectory` function are searched for the DLL and its dependencies."],["LOAD_WITH_ALTERED_SEARCH_PATH","If `filename` specifies an absolute path, the system uses the alternate file search strategy discussed in the [Remarks section] to find associated executable modules that the specified module causes to be loaded."]],"struct":[["Library","The platform-specific counterpart of the cross-platform `Library`."],["Symbol","A symbol from a library."]]});